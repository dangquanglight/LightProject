<?php	$file = getcwd() . "/" . APPPATH . "controllers/MY_controller.php";			include $file;	class Fsadfzerrwez_events_schedule extends Fsadfzerrwez_home{		function Fsadfzerrwez_events_schedule(){					parent::__construct();				$this->load->model("event_schedule");			$this->load->model("event_ref");			$this->load->model("device");		}				/***********************************************************************/		/**************************** START EVENTS SCHEDULE *******************************/				/***********************************************************************/				function events(){			$this->check_login();						$this->check_role(MODULE_EVENTS, MODULE_TYPE_VIEW);			$data = $this->get_events();			$this->load_page('events-schedule', $this->lang->line('events-schedule'), $data);		}				function ajax_events(){						$this->check_login_ajax();			$this->check_role_ajax(MODULE_EVENTS, MODULE_TYPE_VIEW);			$data = $this->get_events();			$model['data'] = $data;			$model['controller_name'] = $this->controller_name;			$this->load->view($this->home_directory . "events-schedule-table", $model);		}				private function get_events(){			$data = $this->get_page_config();				$sort_by = $this->input->get('sort_by');			$ascending = $this->input->get('ascending');			$company_id = get_company_id();			$query = $this->event_schedule->get_events($company_id, $data['keywords'], $data['page'], $data['page_size'], $sort_by, $ascending, $num_rows, get_language());			$this->set_paging_data($data, $query, $num_rows);									return $data;		}				function add_event($ref_id = null){										$this->check_login();			$this->check_role(MODULE_EVENTS, MODULE_TYPE_VIEW);			$result = null;						$company_id = get_company_id();			$err_msg = '';			$id = null;			$ref_event = $this->event_ref->get_id($ref_id, $company_id);			if ($ref_event){				$id = $ref_event->ref_id;			}			$data = array();
			$data['back-url'] = get_back_url(base_url("events"), MODULE_EVENTS);			$event_schedule = new stdClass();			if (is_post()){									$result = false;				$event_schedule = $this->event_schedule->get_post_data();				$user_id = get_user_id();				//UPDATE CASE					if ($id){					$this->check_role(MODULE_EVENTS, MODULE_TYPE_UPDATE);										$result = $this->event_schedule->update($event_schedule, $id, $company_id );					if ($result){						$event_ref = $this->event_ref->get_post_data();						//set time based						$this->event_ref->update($event_ref, $ref_id, $company_id);												$err_msg = get_saved_message('event', $event_schedule->name);						if ($this->input->post('save_and_continue') == false){															$this->set_flashdata($err_msg);							redirect($data['back-url']);						}						else{							add_form_error('', $err_msg);							add_form_error('result', true);						}					}						else{						add_form_error('', get_saved_fail_message('event-schedule', $event_schedule->name));					}									}				else{					$this->check_role(MODULE_EVENTS, MODULE_TYPE_ADD);										$result = $this->event_schedule->insert($event_schedule, $company_id, $user_id);											if ($result){						$event_ref = $this->event_ref->get_post_data();						$event_ref->ref_id = $this->db->insert_id();						//set time based						$event_ref->event_type = 2;						$this->event_ref->insert($event_ref, $company_id, $user_id);												$err_msg = get_saved_message('event', $event_schedule->name);						if ($this->input->post('save_and_continue') == true){							add_form_error('', $err_msg);							add_form_error('result', true);							//clear old data							$event_schedule->clear_data();						}						else{							$this->set_flashdata($err_msg);							redirect($data['back-url']);						}					}					else{						add_form_error('', get_saved_fail_message('event-schedule', $event_schedule->name));					}									}			}			else{				if ($id){					//LOAD EVENT SCHEDULE					$event_schedule = $this->event_schedule->get_id($id, $company_id);									}				else{					$event_schedule = new event_schedule();				}							}			$data['data'] = $event_schedule;			$data['devices'] = $this->device->get_all_devices_4_rand_import($company_id);			$data['err_msg'] = $err_msg;			$data['result'] = $result;			$data['id'] = $id;			$title_page = $this->lang->line('event-schedule');			$this->load_page('add-event-schedule', $title_page, $data);		}				function active_events(){						$this->check_login_ajax();			$this->check_role_ajax(MODULE_EVENTS, MODULE_TYPE_UPDATE);			$active = $this->input->post('active');						$ids = $this->get_array_ids();									$this->event_schedule->active_in($active, $ids, get_company_id());		}				function delete_events(){			$this->check_login_ajax();			$this->check_role_ajax(MODULE_EVENTS, MODULE_TYPE_DELETE);			$this->check_login();									$ids = $this->get_array_ids();									$this->event_schedule->delete_in($ids, get_company_id());		}				function check_events_schedule(){			$this->load->model('alarm');			$this->load->model('alarm_history');			$query = $this->event_schedule->get_all_enable();			$datetime = $this->db_utils->get_datetime();			foreach($query->result() as $row){				//CHECK EVENTS DAILY				if ($row->repeat_type == 1){					$this->check_events_schedule_daily($row, $datetime);				}				else if ($row->repeat_type == 2){					$this->check_events_schedule_weekly($row, $datetime);				}				else{					$this->check_events_schedule_monthly($row, $datetime);				}			}		}				private function check_events_schedule_daily($event, $datetime){			//var_dump($event);			$days = floor((strtotime($datetime->now) - strtotime($event->start_on)) / (24 * 60 * 60));			//echo 'DAY: ' . $days . '<br/>';			if ($days % $event->repeat_every == 0){				//CHECK TIME RAISE EVENT				$this->check_events_time_to_raise_event($event, $datetime);			}					}				private function check_events_schedule_weekly($event, $datetime){			$day_of_week = $datetime->day_of_week;			if ($day_of_week == 0){				$day_of_week = 7;			}						$ar_repeat_on = explode(',', $event->repeat_on);						//var_dump($datetime);						if (in_array($day_of_week, $ar_repeat_on) !== false){												$weeks = floor((strtotime($datetime->now) - strtotime($event->start_on)) / (7 * 24 * 60 * 60));				if ($weeks % $event->repeat_every == 0){					//CHECK TIME RAISE EVENT					$this->check_events_time_to_raise_event($event, $datetime);				}			}		}				private function check_events_schedule_monthly($event, $datetime){			//var_dump($event);			$months = floor((strtotime($datetime->now) - strtotime($event->start_on)) / (30 * 24 * 60 * 60));			//echo 'DAY: ' . $days . '<br/>';			if ($months % $event->repeat_every == 0){				//CHECK TIME RAISE EVENT				$this->check_events_time_to_raise_event($event, $datetime);			}		}				private function check_events_time_to_raise_event($event, $datetime){			//var_dump($datetime);									if ($datetime->hour == $event->hours && $datetime->minute == $event->minutes){				echo 'RAISE EVENT';				$event->is_on = 1;				$this->alarm->active_by_event_schedule($event, true);				$this->alarm_history->insert_by_event_schedule($event);			}			// CHECK TURN OFF EVENT			if ($datetime->hour == $event->hours_off && $datetime->minute == $event->minutes_off){								echo 'RAISE EVENT OFF';				$event->is_on = 0;				$this->alarm->active_by_event_schedule($event, false);				$this->alarm_history->insert_by_event_schedule($event);			}		}				function setup_event($id){			$data = array();			$company_id = get_company_id();			$this->load->model('alarm_history');			$data['device'] = $this->device->get_id($id, $company_id);			$data['logs'] = $this->alarm_history->get_all_device_history_hoursheet($id, $company_id);			$this->load_page('setup-event', $this->lang->line('setup-event'), $data);		}				function enable_all_events(){			$this->check_login_ajax();			$this->load->model('event');			$this->load->model('event_ref');			$this->check_role_ajax(MODULE_EVENTS, MODULE_TYPE_UPDATE);			$active = $this->input->post('active');						$device_id = $this->input->post('device_id');			$company_id = get_company_id();			$this->event_schedule->active_all($device_id, $active, $company_id);			$this->event->active_all($device_id, $active, $company_id);			$this->event_ref->active_all($device_id, $active, $company_id);		}				/***********************************************************************/		/**************************** END OF EVENTS *******************************/				/***********************************************************************/			}?>