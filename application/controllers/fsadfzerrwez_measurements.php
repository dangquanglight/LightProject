<?php	$file = getcwd() . "/" . APPPATH . "controllers/MY_controller.php";			include $file;	class Fsadfzerrwez_measurements extends Fsadfzerrwez_home{		private $table_name = 'measurements';		function Fsadfzerrwez_measurements(){					parent::__construct();						$this->load->model('measurement');			$this->load->model('devices_formula_info');		}				/***********************************************************************/		/**************************** START MEASUREMENT *******************************/				/***********************************************************************/				function measurements(){						$this->check_login();			$this->check_role(MODULE_MEASUREMENTS, MODULE_TYPE_VIEW);			$data = $this->get_measurements();						$this->load_page('measurements', $this->lang->line('measurements'), $data);		}				function ajax_measurements(){						$this->check_login_ajax();			$this->check_role_ajax(MODULE_MEASUREMENTS, MODULE_TYPE_VIEW);			$data = $this->get_measurements();			$model['data'] = $data;			$model['controller_name'] = $this->controller_name;			$this->load->view($this->home_directory . "measurements-table", $model);		}				private function get_measurements(){												$data = $this->get_page_config();				$sort_by = $this->input->get('sort_by');			$ascending = $this->input->get('ascending');			$company_id = get_company_id();			$query = $this->measurement->get_measurements($company_id, $data['keywords'], $data['page'], $data['page_size'], $sort_by, $ascending, $num_rows);			$this->set_paging_data($data, $query, $num_rows);									return $data;		}				function set_lastest_data(){			if (is_post()){				$company_id = get_company_id();				$device_id = $this->input->post('device_id');				$value = $this->input->post('value');				$user_id = get_user_id();				$dt = $this->db_utils->get_datetime();								$datetime = $dt->year . '-' . ($dt->month < 10 ? ('0' . $dt->month) : $dt->month) . '-' . ($dt->day < 10 ? ('0' . $dt->day) : $dt->day) . ' ' . ($dt->hour < 10 ? ('0' . $dt->hour) : $dt->hour) . ':' . ($dt->minute < 10 ? ('0' . $dt->minute) : $dt->minute) . ':' . ($dt->second < 10 ? ('0' . $dt->second) : $dt->second);				$result = $this->measurement->insert_or_update($company_id, $device_id, $datetime, $value);				//WRITE VALUE TO FTP FOLDER				if ($result){					$this->write_ftp_data($company_id, $device_id, $datetime, $value);				}			}		}				private function write_ftp_data($company_id, $device_id, $datetime, $value){			//FIND FTP FOLDER NAME			$this->load->model('ftp_user');			$this->load->model('device');			$this->load->model('db_utils');			$dt = $this->db_utils->get_datetime();			$ftp_info = $this->ftp_user->get_by_company_id($company_id);			//echo 1 . ' -- ' . $datetime;			//print_r($ftp_info);			if ($ftp_info && $datetime){				//echo 2;				$device = $this->device->get_id($device_id, $company_id);								if ($device){									//echo 3;					$dir = FTP_ROOT . $ftp_info->user_name . '/';					//CHECK DIR IS EXISTED					if (is_dir($dir)){						//echo 4;						$file_path = $dir . 'out.txt';						$fh = fopen($file_path, 'a');						if ($fh){							//echo 5;							$fh = fopen($file_path, 'a');														fwrite($fh, $device->device_name . ',' . $datetime . ',' . $value . "\n");							fclose($fh);						}					}				}			}		}				function delete_measurements(){			$this->check_login_ajax();						$this->check_role_ajax(MODULE_MEASUREMENTS, MODULE_TYPE_DELETE);			$ids = $this->get_array_ids();			$this->measurement->delete_in($ids);		}						function get_lastest_data(){			$this->check_login_ajax();						$device_id = $this->input->post('device_id');			$data = new stdClass();			$row = $this->measurement->get_lastest_data($device_id)->row();			//echo $this->db->last_query();			if ($row && isset($row->value)){				$data->value = number_format($row->value);			}			else{				$data->value = '';			}			echo(json_encode($data));		}				function measurements_graph($ids, $date){			$data = array();			$device_ids = explode('-', $ids);			$length_ids = count($device_ids);			$limit = null;			$date_format = null;			$ar_date = explode('-', $date);			if (count($ar_date) == 3){				$date_format = $ar_date[2] . '-' . $ar_date[0] . '-' . $ar_date[1];			}			//echo $length_ids;			if ($length_ids == 1){								$this->measurements_graph_one($device_ids, $date_format, $limit);			}			else if ($length_ids == 2){				$limit = null;				$this->measurements_graph_two($device_ids, $date_format, $limit);			}			else if ($length_ids == 3){				$limit = 1000;				$this->measurements_graph_three($device_ids, $date_format, $limit);			}		}				private function measurements_graph_one($device_ids, $date_format, $limit){			$data1 = array();			//echo date('H:i:s') . "\n";			$query1 = $this->measurement->get_data_query_4_chart($device_ids[0], $date_format, $limit);			//echo date('H:i:s') . "\n";			$categories = array();			foreach($query1->result() as $row){				$categories[] = $row->datetime_format;				$data1[] = $row->value + 0;			}			//echo date('H:i:s') . "\n";			$data = new stdClass();			$data->categories = $categories;			$data->data = array();			$data->data[] = $data1;			echo json_encode($data);		}				private function measurements_graph_two($device_ids, $date_format, $limit){			$categories = array();			$data1 = array();			$data2 = array();			$query1 = $this->measurement->get_data_query_4_chart($device_ids[0], $date_format, $limit);			//echo $this->db->last_query();			$query2 = $this->measurement->get_data_query_4_chart($device_ids[1], $date_format, $limit);						$categories_data = $this->measurement->get_categories_4_chart($device_ids);			//echo $this->db->last_query();			if ($categories_data){				$categories = explode(',', $categories_data->datetime_format);				/*				$ar_temp = array();				$length = count($categories);				for($i = 0; $i < $limit && $i < $length; $i++){					$ar_temp[$i] = $categories[$i];				}				$categories = $ar_temp;				*/			}			//print_r($categories);			foreach($query1->result() as $row){				//echo $row->datetime_format . "\r\n";				//if (in_array($row->datetime_format, $categories)){					$data1[] = $row->value + 0;				//}				//else{					//$data1[] = null;				//}			}						foreach($query2->result() as $row){				//if (in_array($row->datetime_format, $categories)){					$data2[] = $row->value + 0;				//}				//else{					//$data2[] = null;				//}			}						$data = new stdClass();			$data->categories = $categories;			$data->data = array();			$data->data[] = $data1;			$data->data[] = $data2;			echo json_encode($data);		}				private function measurements_graph_three($device_ids, $date_format, $limit){			$categories = array();			$data1 = array();			$data2 = array();			$data3 = array();			$query1 = $this->measurement->get_data_query_4_chart($device_ids[0], $date_format, $limit);			$query2 = $this->measurement->get_data_query_4_chart($device_ids[1], $date_format, $limit);			$query3 = $this->measurement->get_data_query_4_chart($device_ids[2], $date_format, $limit);			$categories_data = $this->measurement->get_categories_4_chart($device_ids, $limit);			//echo $this->db->last_query();			if ($categories_data){				$categories = explode(',', $categories_data->datetime_format);			}						foreach($query1->result() as $row){				if (in_array($row->datetime_format, $categories)){					$data1[] = $row->value + 0;				}				else{					$data1[] = null;				}			}						foreach($query2->result() as $row){				if (in_array($row->datetime_format, $categories)){					$data2[] = $row->value + 0;				}				else{					$data2[] = null;				}			}						foreach($query3->result() as $row){				if (in_array($row->datetime_format, $categories)){					$data3[] = $row->value + 0;				}				else{					$data3[] = null;				}			}						$data = new stdClass();			$data->categories = $categories;			$data->data = array();			$data->data[] = $data1;			$data->data[] = $data2;			$data->data[] = $data3;			echo json_encode($data);		}				function measurements_group_columns_chart($device_id, $date_type){			$categories = array();			$result = array();			//$data = null;			$data = $this->measurement->get_4_columns_chart($device_id, $date_type, 10);									/*			$obj = new stdClass();			$data = $this->devices_formula_info->get_by_device_id($device_id);			if ($data){				//YEAR				if ($date_type == 4){					$obj->categories = [number_format($data->group_year_column_1_value, 2), number_format($data->group_year_column_2_value, 2),						number_format($data->group_year_column_3_value, 2), number_format($data->group_year_column_4_value, 2),						number_format($data->group_year_column_5_value, 2)];					$obj->data = [$data->group_year_column_1_count + 0, $data->group_year_column_2_count + 0,						$data->group_year_column_3_count + 0, $data->group_year_column_4_count + 0, $data->group_year_column_5_count + 0];				}								else if ($date_type == 3){					//MONTH					$obj->categories = [number_format($data->group_month_column_1_value, 2), number_format($data->group_month_column_2_value, 2),						number_format($data->group_month_column_3_value, 2), number_format($data->group_month_column_4_value, 2),						number_format($data->group_month_column_5_value, 2)];					$obj->data = [$data->group_month_column_1_count + 0, $data->group_month_column_2_count + 0,						$data->group_month_column_3_count + 0, $data->group_month_column_4_count + 0, $data->group_month_column_5_count + 0];				}				else if ($date_type == 2){					//WEEK					$obj->categories = [number_format($data->group_week_column_1_value, 2), number_format($data->group_week_column_2_value, 2),						number_format($data->group_week_column_3_value, 2), number_format($data->group_week_column_4_value, 2),						number_format($data->group_week_column_5_value, 2)];					$obj->data = [$data->group_week_column_1_count + 0, $data->group_week_column_2_count + 0,						$data->group_week_column_3_count + 0, $data->group_week_column_4_count + 0, $data->group_week_column_5_count + 0];				}			}			*/			echo json_encode($data);					}				function measurement_info($device_ids, $date_type){			$this->check_login_ajax();			$data = array();						$device_ids = explode('-', trim($device_ids));			foreach($device_ids as $device_id){				//$info = $this->devices_formula_info->get_by_device_id($device_id);				//print_r($info);				//echo "1. " . date('H:i:s') . "<br/>";				$row = $this->measurement->get_mix_max_stddev($device_id, $date_type);				//echo "2. " . date('H:i:s') . "<br/>";				$item = new stdClass();				/*								if ($info){										if ($date_type == 4){						//YEAR						$item->min = number_format($info->min_year, 2);						$item->max = number_format($info->max_year, 2);						$item->stddev =number_format($row->stddev, 2);						$item->median = number_format($info->median_year, 2);					}									else if ($date_type == 3){						//MONTH						$item->min = number_format($info->min_month, 0);						$item->max = number_format($info->max_month, 2);						$item->stddev = number_format($row->stddev, 2);						$item->median = number_format($info->median_month, 2);					}					else if ($date_type == 2){						//WEEK						$item->min = number_format($info->min_week, 2);						$item->max = number_format($info->max_week, 2);						$item->stddev = number_format($row->stddev, 2);						$item->median = number_format($info->median_week, 2);					}				}				else{					$item->min = 0;					$item->max = 0;					$item->stddev = 0;					$item->median = 0;				}				*/								//die();				//$value = $this->measurement->get_median($device_id, $type);									//$value = $this->measurement->get_median_by_date_type($device_id, $date_type);				//$item->median = $value !== null ? number_format($value) : 'NaN';				$value = $this->measurement->get_median_by_date_type($device_id, $date_type);				$item->median = $value !== null && $value != 'NaN' ? number_format($value, 2) : 'NaN';				//echo "3. " . date('H:i:s') . "<br/>";				//$item->median = 0;								//$row = $this->measurement->get_mix_max_stddev($device_id, $type);				if ($row){					$item->min = number_format($row->min, 2);					$item->max = number_format($row->max, 2);					$item->stddev = number_format($row->stddev, 2);									}				//echo "4. " . date('H:i:s') . "<br/>";				$data[] = $item;											}			echo json_encode($data);		}				function status_info($device_ids, $type){			$this->check_login_ajax();			$data = array();			$device_ids = explode('-', trim($device_ids));			$data = array();			$length_ids = count($device_ids);			$query1 = null;			$query2 = null;			$query3 = null;			if ($length_ids > 0){				$query1 = $this->measurement->get_set_off_data($device_ids[0], $type);				if ($length_ids > 1){					$query2 = $this->measurement->get_set_off_data($device_ids[1], $type);					if ($length_ids > 2){						$query3 = $this->measurement->get_set_off_data($device_ids[2], $type);					}				}								if ($length_ids == 1){					$this->status_info_one_device($query1, $data);				}				else if ($length_ids == 2){					$this->status_info_two_device($query1, $query2, $data);				}				else if ($length_ids == 3){					$this->status_info_three_device($query1, $query2, $query3, $data);				}							}									echo json_encode($data);		}				private function status_info_one_device($query1, &$data){			$times_on_1 = 0;			$times_off_1 = 0;			$times_change_status_1 = 0;			$current_value_1 = null;			$times_overlapped = 0;						foreach($query1->result() as $row1){				//CHECK ON OFF				if ($row1->value == 1){					$times_on_1++;				}				else{					$times_off_1++;				}							//CHECK CHANGE STATUS				if ($current_value_1 === null){					$current_value_1 = $row1->value;				}				else if ($current_value_1 != $row1->value){					$times_change_status_1++;					$current_value_1 = $row1->value;				}			}						$result1 = new stdClass();			$result1->times_on = $times_on_1;			$result1->times_off = $times_off_1;			$result1->times_change_status = $times_change_status_1;			$result1->times_overlapped = $times_overlapped;			$data[] = $result1;		}				private function status_info_two_device($query1, $query2, &$data){			$times_on_1 = 0;			$times_off_1 = 0;			$times_change_status_1 = 0;			$current_value_1 = null;			$times_on_2 = 0;			$times_off_2 = 0;			$times_change_status_2 = 0;			$current_value_2 = null;			$times_overlapped = 0;						$dataset1 = array();			//DEVICE 1			foreach($query1->result() as $row1){				//CHECK ON OFF				if ($row1->value == 1){					$times_on_1++;				}				else{					$times_off_1++;				}							//CHECK CHANGE STATUS				if ($current_value_1 === null){					$current_value_1 = $row1->value;				}				else if ($current_value_1 != $row1->value){					$times_change_status_1++;					$current_value_1 = $row1->value;				}					$dataset1[] = $row1;			}			//DEVICE 2			$dataset2 = array();			foreach($query2->result() as $row2){				//CHECK ON OFF				if ($row2->value == 1){					$times_on_2++;				}				else{					$times_off_2++;				}							//CHECK CHANGE STATUS				if ($current_value_2 === null){					$current_value_2 = $row2->value;				}				else if ($current_value_2 != $row2->value){					$times_change_status_2++;					$current_value_2 = $row2->value;				}					$dataset2[] = $row2;			}			//CHECK OVERLAPPED			foreach($dataset1 as $row1){				foreach($dataset2 as $row2){					if ($row1->timestamp == $row2->timestamp){						if ($row1->value == $row2->value){							$times_overlapped++;						}						break;					}					else if ($row1->timestamp < $row2->timestamp){						break;					}				}			}						$result1 = new stdClass();			$result1->times_on = $times_on_1;			$result1->times_off = $times_off_1;			$result1->times_change_status = $times_change_status_1;			$result1->times_overlapped = $times_overlapped;						$result2 = new stdClass();			$result2->times_on = $times_on_2;			$result2->times_off = $times_off_2;			$result2->times_change_status = $times_change_status_2;			$result2->times_overlapped = $times_overlapped;						$data[] = $result1;			$data[] = $result2;		}				private function status_info_three_device($query1, $query2, $query3, &$data){			$times_on_1 = 0;			$times_off_1 = 0;			$times_change_status_1 = 0;			$current_value_1 = null;			$times_on_2 = 0;			$times_off_2 = 0;			$times_change_status_2 = 0;			$current_value_2 = null;			$times_on_3 = 0;			$times_off_3 = 0;			$times_change_status_3 = 0;			$current_value_3 = null;			$times_overlapped = 0;						$dataset1 = array();			//DEVICE 1			foreach($query1->result() as $row1){				//CHECK ON OFF				if ($row1->value == 1){					$times_on_1++;				}				else{					$times_off_1++;				}							//CHECK CHANGE STATUS				if ($current_value_1 === null){					$current_value_1 = $row1->value;				}				else if ($current_value_1 != $row1->value){					$times_change_status_1++;					$current_value_1 = $row1->value;				}					$dataset1[] = $row1;			}			//DEVICE 2			$dataset2 = array();			foreach($query2->result() as $row2){				//CHECK ON OFF				if ($row2->value == 1){					$times_on_2++;				}				else{					$times_off_2++;				}							//CHECK CHANGE STATUS				if ($current_value_2 === null){					$current_value_2 = $row2->value;				}				else if ($current_value_2 != $row2->value){					$times_change_status_2++;					$current_value_2 = $row2->value;				}					$dataset2[] = $row2;			}			//DEVICE 3			$dataset3 = array();			foreach($query3->result() as $row3){				//CHECK ON OFF				if ($row3->value == 1){					$times_on_3++;				}				else{					$times_off_3++;				}							//CHECK CHANGE STATUS				if ($current_value_3 === null){					$current_value_3 = $row3->value;				}				else if ($current_value_3 != $row3->value){					$times_change_status_3++;					$current_value_3 = $row3->value;				}					$dataset3[] = $row3;			}			//CHECK OVERLAPPED			foreach($dataset1 as $row1){				foreach($dataset2 as $row2){										if ($row1->timestamp == $row2->timestamp){						if ($row1->value == $row2->value){							foreach($dataset3 as $row3){								if ($row2->timestamp == $row3->timestamp){									if ($row1->value == $row2->value){																			$times_overlapped++;									}									break;								}								else if ($row2->timestamp < $row3->timestamp){									break;								}							}							break;						}						break;					}					else if ($row1->timestamp < $row2->timestamp){						break;					}				}			}						$result1 = new stdClass();			$result1->times_on = $times_on_1;			$result1->times_off = $times_off_1;			$result1->times_change_status = $times_change_status_1;			$result1->times_overlapped = $times_overlapped;						$result2 = new stdClass();			$result2->times_on = $times_on_2;			$result2->times_off = $times_off_2;			$result2->times_change_status = $times_change_status_2;			$result2->times_overlapped = $times_overlapped;						$result3 = new stdClass();			$result3->times_on = $times_on_3;			$result3->times_off = $times_off_3;			$result3->times_change_status = $times_change_status_3;			$result3->times_overlapped = $times_overlapped;						$data[] = $result1;			$data[] = $result2;			$data[] = $result3;		}				private function get_datetime_from_rawtext($text){			$ar = explode('-', $text);			//print_r($ar);			if (count($ar) == 6){				return $ar[0] . '-' . $ar[1] . '-' . $ar[2] . ' ' . $ar[3] . ':' . $ar[4] . ':' . $ar[5];			}			else{				return "";			}		}				function cal_median_by_date($device_id, $start_time1, $end_time1, $start_time2, $end_time2){			$data = new stdClass();			$value1 = 'NaN';			$value2 = 'NaN';			if ($start_time1 != '_' && $end_time1 != ''){				$start_timestamp1 = $this->get_datetime_from_rawtext($start_time1);				$end_timestamp1 = $this->get_datetime_from_rawtext($end_time1);								$value1 = $this->measurement->get_median_by_date($device_id, $start_timestamp1, $end_timestamp1);				$data->median1 = $value1 != 'NaN' ? number_format($value1, 2) : $value1;			}			if ($start_time2 != '_' && $end_time2 != ''){				$start_timestamp2 = $this->get_datetime_from_rawtext($start_time2);				$end_timestamp2 = $this->get_datetime_from_rawtext($end_time2);				$value2 = $this->measurement->get_median_by_date($device_id, $start_timestamp2, $end_timestamp2);				$data->median2 = $value2 != 'NaN' ? number_format($value2, 2) : $value2;			}						$data->durations = 'NaN';			if ($value1 != 'NaN' && $value2 != 'NaN' && $value1){				if ($value1 == $value2){					$data->durations = 0;				}				else if ($value2 > $value1 && $value1){					$data->durations = number_format(((1 - ($value2/$value1)) * 100) * -1, 2);				}				else if($value2 < $value1 && $value2){					$data->durations = number_format(((1-($value1/$value2))*100) * -1, 2);				}			}						echo json_encode($data);		}				function import(){			$this->check_login();			$this->check_role(MODULE_MEASUREMENTS, MODULE_TYPE_ADD);			$this->load->model('device');			$data = array();			if (is_post()){					$err_msg = '';				$skip = 0;				$total = 0;								if (isset($_FILES['file']) && $_FILES['file']['name']){										$ext = get_file_upload_ext('file');					if ($ext == '.xls' || $ext == '.xlsx'){						//IMPORT EXCEL FILE						include getcwd() . "/" . APPPATH . "/third_party/PHPExcel.php";						$file_path = $_FILES['file']['tmp_name'];												$start_import_time = time();												$inputFileType = PHPExcel_IOFactory::identify($file_path);						$objReader = PHPExcel_IOFactory::createReader($inputFileType);						$objPHPExcel = $objReader->load($file_path);						$objWorksheet = $objPHPExcel->getActiveSheet();						$length = $objWorksheet->getHighestRow();						for ($i = 0; $i <= $length; ++$i) {							$objPHPExcel->getActiveSheet()->getStyle('A' . $i)->getNumberFormat()->setFormatCode('dd-mm-yyyy HH:MM:ss');						}												$sheetData = $objPHPExcel->getActiveSheet()->toArray(null,true,true);						//var_dump($sheetData);						$dates_invalid = array();						$missing_devices = array();						$company_id = get_company_id();						$user_id = get_user_id();												$rows_effect = 0;						$length = count($sheetData);												$arr_device_ref = array();												$current_device = null;						//START TRANSACTION						$this->db->trans_start();						for($i = 1; $i < $length; $i++){							$row = $sheetData[$i];								//var_dump($row);							if (count($row) >= 3){								if ($row[0] !== null && $row[1] !== null && $row[2] !== null){									$date = DateTime::createFromFormat('d-m-Y H:i:s', $row[0]);										//echo $row[0] . '<br/>';									if ($date){										$device_name = $row[1];										$value = $row[2];										$timestamp = $date->format('Y-m-d H:i:s');										$device = null;										//echo $device_name . ' --- ' . $value . ' --- ' . $timestamp . '<br/>';										if ($current_device == null || $current_device->device_name != $device_name){																					//looking for in the ref array											foreach($arr_device_ref as $ref){												if ($ref->device_name == $device_name){													//we found it													$device = $ref;													//exit loop													break;												}											}											//check device founded or not											if (!$device){												//looking for in the database												$device = $this->device->get_by_device_name($device_name, $company_id);												//add into ref devices												$arr_device_ref[] = $device;												//set current device												$current_device = $device;											}										}										else{											//same device											$device = $current_device;										}																				//check found device										if ($device){											$result = $this->measurement->insert_or_update($company_id, $device->id, $timestamp, $value, $user_id);											$rows_effect++;										}										else{											$missing_devices[] = $i;										}																	}									else{										$dates_invalid[] = $i;																				}								}							}						}						//END OF TRANSACTION						$this->db->trans_complete();																		//clear array to release memory						$arr_device_ref = null;						$total_import_time = time() - $start_import_time;												$text = 'Row(s) effect: ' . $rows_effect;						if (count($dates_invalid) > 0){							$text .= "<br/><label class='red'>Date invalid at rows(s): [ " . implode(', ', $dates_invalid) . " ]</label>";						}						if (count($missing_devices) > 0){							$text .= "<br/><label class='red'>Missing devices at row(s): [ " . implode(', ', $missing_devices) . " ]</label>";						}						$text .= "<br/><label>Total imported time: " . date('H:i:s', $total_import_time) . "</label>";						add_form_error('result', "Import successfully <a id='details' class='u' href='javascript:void(0)' ref='d-details'>" . $this->lang->line('more-details') . "</a><p class='hidden' id='d-details'>$text</p>");											}					else if ($ext == 'cvs'){						//IMPORT CSV											}					else{						$err_msg = 'File is not valid';					}				}				else{					$err_msg = 'Please upload file (excel) to import';				}				add_form_error('', $err_msg);			}						$this->load_page('import-measurements', $this->lang->line('import-measurements'), $data);		}				/***********************************************************************/		/**************************** MEASUREMENT CHART *******************************/				/***********************************************************************/				function send_measurement(){			$this->check_login();			$this->load->model('device');			$this->load->model('event');			$result = null;			$err_msg = '';			$company_id = get_company_id();			$device_id = $this->input->post('device_id');			if (is_post()){						$value = $this->input->post('value');								$user_id = get_user_id();				$date = new DateTime();					$datetime = null;								$result = $this->measurement->insert_or_update($company_id, $device_id, $datetime, $value);								if ($result){					$err_msg = 'Measurement value has been sent successfully';				}				else{					$err_msg = 'Measurement value has been sent fail';				}								add_form_error('', $err_msg);				add_form_error('result', $result);			}						$data = array();			$data['device_id'] = $device_id;			$data['devices'] = $this->device->get_measurements_and_status($company_id);			$data['result'] = $result;			$this->load_page('send-measurement', $this->lang->line('send-measurement'), $data);		}				function image_device($id){			$company_id = get_company_id();			$file_name = '';			//echo 'A';			if ($company_id){				//echo 'B';				$measurement = $this->measurement->get_id($id, $company_id);				if (!$measurement){					//get last image					$measurement = $this->measurement->get_lastest_data($id, 1);				}				//echo $this->db->last_query();								if ($measurement && $measurement->image){					//echo 'C';					$path = FTP_IMAGES_ROOT . $measurement->company_id . '/' . $measurement->site_id . '/' . $measurement->zone_id . '/' . $measurement->device_id . '/' . $measurement->image;					//echo $path;					if (file_exists($path)){																		list($width,$height) = getimagesize($path);																		$fh = fopen($path, 'rb');						$img_buff = '';						while($fh !== false && !feof($fh)){							$img_buff .= fread($fh, 1024);						}						$test = @imagecreatefromstring($img_buff);						/* Create a black image */						//$im  = imagecreatetruecolor(150, 30);						//$bgc = imagecolorallocate($test, 255, 255, 255);						$tc  = imagecolorallocate($test, 255, 255, 255);						//imagefilledrectangle($test, 0, 0, 150, 30, $bgc);						/* Output an error message */						imagestring($test, 18, $width - 220, $height - 30, $measurement->datetime_format, $tc);						header('Content-Type: image/jpeg');												//OUTPUT IMAGE						imagejpeg($test);						imagedestroy($test);						die();												$file_name = $path;					}					else{						$file_name = getcwd() . "/images/not-found.png";					}				}				else{					$file_name = getcwd() . "/images/not-found.png";				}			}			else{				$file_name = getcwd() . "/images/please-login.png";			}			header('Content-Length: '.filesize($file_name)); //<-- sends filesize header			header('Content-Type: image/jpg'); //<-- send mime-type header			header('Content-Disposition: inline; filename="'.$file_name.'";'); //<-- sends filename header			readfile($file_name); //<--reads and outputs the file onto the output buffer			die(); //<--cleanup					}	}		function formatXAxis($value){		return 'Week ' . date('W', $value);	}?>