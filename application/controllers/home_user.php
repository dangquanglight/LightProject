<?php	$file = getcwd() . "/" . APPPATH . "controllers/MY_controller.php";			include $file;	class Home_user extends Fsadfzerrwez_home{		function Home_user(){			parent::__construct();			$this->load->model('user');		}				function logout(){			$user = get_login_data();						sign_out();						if (isset($_COOKIE[$this->cookie_auth_name])){				setcookie($this->cookie_auth_name, "", -1);			}						$redirect_url = base_url('');						redirect($redirect_url);		}				function user_login(){			$user_id = get_user_id();			$err_msg = "";			if (!$user_id){				$email = $this->input->post('email');				if (!$email){					$email = $this->input->post('email_login');				}				$password = $this->input->post('password');				if (!$password){					$password = $this->input->post('password_login');				}				$remember = $this->input->post('remember');				if (!$remember){					$remember = $this->input->post('remember_login');				}								if ($email && $password){					$user = $this->user->get_user_by_email_password($email, $password);					if ($user){						if($user->status && $user->role_status){														//NOT ACTIVATE							if (!$user->activated){																$err_msg = $this->lang->line('need-activate-account');							}							else{								$result = true;								set_login_data($user);															if ($remember){									$time = time();									//add subfix 5 and postfix 5 characters									$rem_data = "email=" . urlencode($email) . "&hash=" . substr($time, 0, 5) . md5(urlencode($password)) . substr($time, -5);									//2 weeks									setcookie($this->cookie_auth_name, $rem_data, $time + 14 * 24 * 60 * 60);								}								else{									setcookie($this->cookie_auth_name, "", -1);								}															}						}						else{							$err_msg = $this->lang->line('account-disabled');						}					}					else{						$err_msg = $this->lang->line('login-fail');					}				}				else{					$err_msg = $this->lang->line('login-fail');				}			}			echo $err_msg;		}				function login(){			$redirect_url = urldecode($this->input->get('redirect_url'));			$user_id = get_user_id();			if ($user_id){								if ($this->view_name == "login"){//check current url					$redirect_url = base_url();				}				redirect($redirect_url);				return;			}			$result = null;			$err_msg = "";						if (is_post()){												$result = false;					$email = $this->input->post('email');				if (!$email){					$email = $this->input->post('email_login');				}				$password = $this->input->post('password');				if (!$password){					$password = $this->input->post('password_login');				}				$remember = $this->input->post('remember');				if (!$remember){					$remember = $this->input->post('remember_login');				}								if ($email && $password){					$user = $this->user->get_user_by_email_password($email, $password);					if ($user){						if($user->status && $user->role_status){														//NOT ACTIVATE							if (!$user->activated){																redirect(base_url('need-activate-account'));							}							else{								$result = true;								set_login_data($user);															if ($remember){									$time = time();									//add subfix 5 and postfix 5 characters									$rem_data = "email=" . urlencode($email) . "&hash=" . substr($time, 0, 5) . md5(urlencode($password)) . substr($time, -5);									//2 weeks									setcookie($this->cookie_auth_name, $rem_data, $time + 14 * 24 * 60 * 60);								}								else{									setcookie($this->cookie_auth_name, "", -1);								}								if (!$redirect_url){									$redirect_url = base_url();								}								redirect($redirect_url);							}						}						else{							redirect(base_url('account-disabled'));						}					}					else{						$err_msg = $this->lang->line('login-fail');					}				}				else{					$err_msg = $this->lang->line('login-fail');				}			}											$data['redirect_url'] = $redirect_url;				$data['result'] = $result;						$data['err_msg'] = $err_msg;						$this->load_page('login', $this->lang->line('login'), $data); 		}				function change_password(){			$this->check_login();						$result = null;						$err_msg = "";				$user_id = get_user_id();			$user = $this->user->get_id($user_id);							if (is_post()){								$result = false;												$this->form_validation->set_rules('old_password', 'name', 'trim|required');													if ($this->form_validation->run() == TRUE){					$this->form_validation->set_rules('password', 'name', 'trim|required');					if ($this->form_validation->run() == TRUE){						$this->form_validation->set_rules('confirm_password', 'name', 'trim|required');						if ($this->form_validation->run() == TRUE){							$old_password = $this->input->post('old_password');							$password = $this->input->post('password');							$confirm_password = $this->input->post('confirm_password');							if ($password == $confirm_password){														if (strlen($password) > 6){									if ($old_password == $user->password){										$result = $this->user->reset_password($user_id, $password);																if ($result){																			$result = true;																			$err_msg = $this->lang->line('change-password-saved');										}										else{											$err_msg = $this->lang->line('change-password-fail');										}									}									else{										$err_msg = $this->lang->line('old-password-dont-match');									}								}								else{									$err_msg = $this->lang->line('required-password-length');								}							}							else{								$err_msg = $this->lang->line('required-pass-and-confirm-pass');							}						}						else{							$err_msg = $this->lang->line('required-confirm-password');						}					}					else{						$err_msg = $this->lang->line('required-password');					}				}				else{					$err_msg = $this->lang->line('required-old-password');				}															}			else{								$user = $this->user->get_id($user_id);			}										$data['err_msg'] = $err_msg;			$data['result'] = $result;									$data['id'] = $user_id;			$data['data'] = $user;						$title_page = $this->lang->line('change-password');			if (!$user){				$title_page = get_not_found_short();			}						$this->load_page('change-password', $title_page, $data);		}				function not_enough_privilege(){			$data = array();			$this->load_page('not-enough-privilege', $this->lang->line('not-enough-privilege'), $data);		}				function forgot_password(){			if(is_login()){				redirect("");			}			$title_page = $this->lang->line('forgot_password');			$err_msg = '';			$result = null;			$data = array();			if(is_post()){				$result = false;				$email = $this->input->get('user');				$user = $this->user->get_user_by_email($email);				if ($user){										$this->load->helper('email');					$this->load->model('emailtemplate');					$email_template = $this->emailtemplate->get_id(4);					if ($email_template){																		$content = $email_template->content;						$content = str_replace("%home page%", base_url(''), $content);						$content = str_replace("%name%", htmlspecialchars($user->first_name), $content);						$content = str_replace("%password%", htmlspecialchars($user->password), $content);						$content = str_replace("%logo%", base_url(WEBSITE_DIRECTORY_IMAGES . $this->website_setting->logo), $content);						$content = str_replace("%email%", htmlspecialchars($user->email), $content);																		$result = send_email(NOREPLY_EMAIL, EMAIL_NAME, $this->website_setting->email_password, $user->email, $email_template->title . SUFFIX_EMAIL_TITLE, $content);												if ($result){							$result = true;							$err_msg = 'Please check your email';						}						else{							$err_msg = 'Email has been sent error';						}					}					else{						echo $this->lang->line('data_not_found');					}				}				else{					$err_msg = "Your email didn't exist";				}			}			$data['err_msg'] = $err_msg;			$data['result'] = $result;			$this->load_page('forgot-password', $title_page, $data); 		}				/**********************************************/		/******************* USERS ********************/				/**********************************************/				function profile(){					$result = null;						$err_msg = "";			$data = array();				$user_id = get_user_id();			$this->check_login();						$data['data'] = $this->user->get_id($user_id);			if (is_post()){										$result = false;								$user = $this->user->get_post_data();								$this->form_validation->set_rules('first_name', 'first_name', 'trim|required');										if ($this->form_validation->run() == TRUE){					$result = $this->user->update_profile($user, $user_id);					if ($result){														$result = true;						$login_user = get_login_data();												$login_user->first_name = $user->first_name;						$login_user->last_name = $user->last_name;						set_login_data($login_user);													$err_msg = $this->lang->line('update-profile-success');					}					else{						$err_msg = $this->lang->line('update-profile-fail');					}				}				else{					$err_msg = $this->lang->line('required-first-name');				}				$data['data']->first_name = $user->first_name;				$data['data']->last_name = $user->last_name;				$data['data']->phone = $user->phone;								$data['data']->address = $user->address;										}						$page_title = "";			if ($data['data']){				$page_title = $this->lang->line('profile');			}			else{				$page_title = $this->lang->line('profile-not-found');			}						$data['result'] = $result;			$data['err_msg'] = $err_msg;			$this->load_page("profile", $page_title, $data);		}				/**********************************************/		/******************* USERS ********************/				/**********************************************/				function register(){					$result = null;						$err_msg = "";			$data = array();							//check disable login			$this->load->model('site_setting');			$setting = $this->site_setting->get_one();			if ($setting && !$setting->enable_register){				redirect('disable-register');			}						//check already login			if (is_login()){				redirect(base_url(''));			}						$user = new user();			if (is_post()){										$result = false;								$user = $this->user->get_post_data();				//CHECK FTP USER NAME				if (strlen($user->ftp_user_name) < 6){					$err_msg = $this->lang->line('min-length-ftp-user-name');				}				if (!$err_msg && !preg_match("/^[a-zA-Z0-9]+$/", $user->ftp_user_name, $match)){					$err_msg = $this->lang->line('require-valid-user-name');				}				if (!$err_msg){					if ($this->form_validation->run('register') == TRUE){						$is_valid = true;						//CHECK COMPANY EXISTED						$this->load->model('company');						$this->load->model('ftp_user');						$this->load->model('module');						$this->load->model('role');						$this->load->model('role_4_modules');						$old_company = $this->company->get_by_name($user->company_name);						if ($old_company){							$is_valid = false;							add_form_error('company_name', $this->lang->line('duplicate-company-name'));						}												//CHECK EMAIL EXIST						$old_user = $this->user->get_by_email($user->email);						if ($old_user){							$is_valid = false;							add_form_error('email', $this->lang->line('duplicate-email'));						}						//CHECK FTP EXIST						$old_ftp_user = $this->ftp_user->get_id($user->ftp_user_name);						if ($old_ftp_user){							$is_valid = false;							add_form_error('ftp_user_name', $this->lang->line('duplicate-ftp-user-name'));						}												if($is_valid){							//UPDATE USER							$user->activated = 0;							$user->status = 1;							$user->role_id = 1;							$user->activated_key = uniqid();														$company = new Company();							$company->company_name = $user->company_name;							$company->description = $user->company_description;														//CREATE USER + COMPANY + UPDATE COMPANY ID IN USER							$this->db->trans_begin();							try{														$result = $this->user->insert($user);								if ($result){									//SET ID									$user_id = $this->db->insert_id();																$company->owner_id = $user_id;									$result = $this->company->insert($company, $user_id);									$company_id = $this->db->insert_id();									//CREATE FTP ACCOUNT									if ($result){										$result = $this->ftp_user->insert($user->ftp_user_name, $user->ftp_password, $company_id);										//CREATE DIR AND SET OWNER										//USING ON LINUX										//TEMPORARY DISABLED																				$location = FTP_ROOT . $user->ftp_user_name;																				$uold = umask(0);										mkdir($location,0777,true);										umask($uold);																				/*										//USING ON WINDOWS										if (!is_dir("C:/inetpub/wwwroot/ftp/" . $user->ftp_user_name)){											mkdir("C:/inetpub/wwwroot/ftp/" . $user->ftp_user_name);										}										*/									}																	if ($result){										//UPDATE COMPANY ID										$role_admin_id = $this->role->set_default_modules($company_id);																			$result = $this->user->update_role_and_company_id($user_id, $role_admin_id, $company_id);									}								}							}							catch(Exception $ex){														}														if ($result){								$this->db->trans_commit();										//SEND ACTIVATE EMAIL								$this->load->model('email_template');								$email_template = $this->email_template->get_id(1);								if($email_template){									set_userdata('register-email', $user->email);									$body = replace_email_text($user, $email_template->content_en);									$body = str_replace('%ftp-username%', $user->ftp_user_name, $body);									$body = str_replace('%ftp-password%', $user->ftp_password, $body);									//$body = str_replace('%ip-address%', $_SERVER['SERVER_ADDR'], $body);									$body = str_replace('%ip-address%', '14.0.19.72', $body);																		send_email($user->email, $email_template->title_en, $body);																	redirect(base_url('register-completed'));								}							}							else{								$this->db->trans_rollback();							}						}					}					else{						$err_msg = $this->lang->line('required-first-name');					}				}			}						$data['data'] = $user;			$data['result'] = $result;			$data['err_msg'] = $err_msg;			$this->load_page("register", $this->lang->line('register'), $data);		}				function disable_register(){			$this->load->model('cms');			$cms = $this->cms->get_id(5);			$title = get_title_cms($cms);			$data['data'] = $cms;			$this->load_page("disable-register", $title, $data);		}						function need_activate_account(){			$this->load->model('cms');			$cms = $this->cms->get_id(2);			$title = get_title_cms($cms);			$data['data'] = $cms;			$this->load_page("need-activate-account", $title, $data);		}				function register_completed(){			$this->load->model('cms');			$data['data'] = $this->cms->get_id(4);			$title = get_title_cms($data['data']);						$this->load_page("register-complete", $title, $data);		}				function account_disabled(){			$this->load->model('cms');			$data['data'] = $this->cms->get_id(6);			$title = get_title_cms($data['data']);						$this->load_page("account-disabled", $title, $data);					}				function activate($key){			$user = $this->user->get_by_activated_key($key);			$status = -1;			if ($user){				if ($user->activated){					//ALREADY ACTIVATED					$status  = 1;				}				else{					$status = 0;					//UPDATE ACTIVATED STATUS					$this->user->update_activated($user->id);					//LOGIN IN					set_login_data($user);					$this->user_role_modules = $this->role_4_modules->get_arr_by_role($user->role_id);				}			}			else{				//USER NOT EXIST				$status = 2;			}			$data['status'] = $status;			$this->load_page("activate", $this->lang->line('activate'), $data);		}		/**********************************************/		/******************* END OF USERS *************/				/**********************************************/	}?>