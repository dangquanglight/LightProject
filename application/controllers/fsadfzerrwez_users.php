<?php	$file = getcwd() . "/" . APPPATH . "controllers/MY_controller.php";			include $file;	class Fsadfzerrwez_users extends Fsadfzerrwez_home{		function Fsadfzerrwez_users(){					parent::__construct();						$this->load->model('user');		}				/***********************************************************************/		/**************************** START USERS *******************************/				/***********************************************************************/				function users(){			$this->check_login();			$this->check_role(MODULE_USERS, MODULE_TYPE_VIEW);			$data = $this->get_users();						$this->load_page('users', $this->lang->line('users'), $data);		}				function ajax_users(){				$this->check_login_ajax();			$this->check_role_ajax(MODULE_USERS, MODULE_TYPE_VIEW);			$data = $this->get_users();			$model['data'] = $data;			$model['controller_name'] = $this->controller_name;			$this->load->view($this->home_directory . "users-table", $model);		}				private function get_users(){						$this->check_login();			$data = $this->get_page_config();				$sort_by = $this->input->get('sort_by');			$ascending = $this->input->get('ascending');						$num_rows = 0;						$query = $this->user->get_users($data['keywords'], $data['page'], $data['page_size'], $sort_by, $ascending, $num_rows);			$this->set_paging_data($data, $query, $num_rows);												return $data;		}				function add_user($id = null){							$this->check_login();			$this->check_role(MODULE_USERS, MODULE_TYPE_VIEW);												$result = null;			$user = null;			$err_msg = "";				$company_id = get_company_id();			$data = array();
			$data['back-url'] = get_back_url(base_url("users"), MODULE_USERS);			if (is_post()){								$result = false;								$user = $this->user->get_post_data();				$this->form_validation->set_rules('first_name', 'first_name', 'trim|required');										if ($this->form_validation->run() == TRUE){					if (!$id){						$this->check_role(MODULE_USERS, MODULE_TYPE_ADD);						//CHECK PASSWORD						$this->form_validation->set_rules('password', 'password', 'trim|required');						if ($this->form_validation->run() == TRUE){							//NEW USER - CHECK EMAIL EXISTED							$old_user = $this->user->get_user_by_email($user->email);							if (!$old_user){																$this->form_validation->set_rules('email', 'email', 'trim|required|email');								$user->company_id = $company_id;								$result = $this->user->insert($user);								if ($result){									//CHECK UPDATE USER IS CURRENT LOGIN USER									$login_user = get_login_data();									if($login_user->email == $user->email){										$login_user->first_name = $user->first_name;										$login_user->last_name = $user->last_name;										set_login_data($login_user);									}									$err_msg = get_saved_message('user', trim($user->first_name . " " . $user->last_name));									if ($this->input->post('save_and_continue') == false){										$this->set_flashdata($err_msg);										redirect($data['back-url']);									}								}								else{									$err_msg = get_saved_fail_message('user', trim($user->first_name . " " . $user->last_name));								}							}							else{								$err_msg = $this->lang->line('email-taken');							}						}						else{							$err_msg = $this->lang->line('required-password');						}					}					else{						$this->check_role(MODULE_USERS, MODULE_TYPE_UPDATE);						//UPDATE						$result = $this->user->update($user, $id);						if ($result){							//CHECK UPDATE USER IS CURRENT LOGIN USER							$login_user = get_login_data();							if($login_user->email == $user->email){								$login_user->first_name = $user->first_name;								$login_user->last_name = $user->last_name;								set_login_data($login_user);							}							$err_msg = get_saved_message('user', trim($user->first_name . " " . $user->last_name));														$this->set_flashdata($err_msg);							redirect($data['back-url']);						}						else{							$err_msg = get_saved_fail_message('user', trim($user->first_name . " " . $user->last_name));						}					}				}				else{					$err_msg = $this->lang->line('required-first-name');				}								}			else{								if ($id){										$user = $this->user->get_id($id);									}				else{										$user = new user();				}			}					$this->load->model('role');			$data['roles'] = $this->role->get_all_roles(get_company_id());			$data['err_msg'] = $err_msg;			$data['result'] = $result;									$data['id'] = $id;			$data['data'] = $user;			$data['page'] = $this->input->get('page');			$data['page_size'] = $this->input->get('page_size');			$data['keywords'] = $this->input->get('keywords');						$title_page = $this->lang->line('user');			if (!$user){				$title_page = get_not_found_short();			}			$this->load_page('add-user', $title_page, $data);		}				function reset_password($id = null){						$this->check_login();			$this->check_role(MODULE_USERS, MODULE_TYPE_UPDATE);			$result = null;			$user = null;			$err_msg = "";						$user = $this->user->get_id($id);										if ($user){				if (is_post()){									$result = false;													$this->form_validation->set_rules('password', 'password', 'trim|required');					if ($this->form_validation->run() == TRUE){						$password = $this->input->post('password');						$result = $this->user->reset_password($id, $password);												if ($result){															redirect($data['back-url']);						}						else{							$err_msg = $this->lang->line('reset-password-fail');						}					}					else{						$err_msg = $this->lang->line('required-password');					}					}			}			else{				$result = false;				$err_msg = get_not_found_long('user');			}						if (!$user){				$user = new user();			}								$data['err_msg'] = $err_msg;			$data['result'] = $result;									$data['id'] = $id;			$data['data'] = $user;									$title_page = $this->lang->line('customer');			if (!$user){				$title_page = get_not_found_short();			}			$this->load_page('reset-password', $title_page, $data);		}				function active_users(){						$this->check_login_ajax();			$this->check_role_ajax(MODULE_USERS, MODULE_TYPE_UPDATE);						$active = $this->input->post('active');						$ids = $this->get_array_ids();									$this->user->active_in($active, $ids);		}				function delete_users(){						$this->check_login_ajax();			$this->check_role_ajax(MODULE_USERS, MODULE_TYPE_DELETE);			$ids = $this->get_array_ids();									$this->user->delete_in($ids);		}				/***********************************************************************/		/**************************** END OF USERS *******************************/				/***********************************************************************/			}?>